
///// Phase 1

import java.sql.SQLOutput;
import java.io.*;
import java.sql.SQLOutput;
import java.util.Arrays;
import java.util.Scanner;

public class osextended
{
    private static char[]R = new char[4];
    private static char[]IR = new char[4];
    private static char[]IC = new char[2];
    private static boolean[]C = new boolean[1];          // can we make it boolean??
    private static char[][] memory = new char[100][4];
    private static char SI;
    private static BufferedReader reader;
    public static void doFinal(String path)
    {
        //clear the contents of the output file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt"))) {
            writer.write("");
            writer.flush();
            writer.close();
        } catch (IOException e) {
            // Handle exception
            e.printStackTrace();
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {
            osextended.reader = reader;
            String line;
            boolean prevLineDTA = false;
            // Read the file line by line until the end is reached
            while ((line = reader.readLine()) != null) {
                //System.out.println(line);
                if(line.startsWith("$AMJ")){
                    init();
                }

                else if(line.startsWith("$DTA")){
                    execute();
                    prevLineDTA = true;
                }

                else if(line.startsWith("$END")){
                    prevLineDTA = false;
                    continue;
                }

                else if(!prevLineDTA){
                    load(line);
                    char[] temp = {'0', '0'};
                    IC = temp;
                    System.out.println("Current line: " + line + "\n");
                    System.out.println("Memory:");
                    printMemory();
                    prevLineDTA = false;
                }
            }

        } catch (IOException e) {
            // Handle any potential IO exceptions, such as file not found
            e.printStackTrace();
        }

    }

    private static void init()
    {
        Arrays.fill(R, '\u0000');
        Arrays.fill(IR, '\u0000');
        Arrays.fill(IC, '\u0000');
        Arrays.fill(C, false);
    }

    private static void load(String line)
    {
        int charIndex = 0;
        for (int i = 0; i < 100; i++) {
            for (int j = 0; j < memory[0].length; j++) {
                // Check if there are still characters in the string
                if (charIndex < line.length()) {
                    memory[i][j] = line.charAt(charIndex);
                    charIndex++;
                    if(line.charAt(charIndex-1)=='H'){
                        break;
                    }
                } else {
                    // If the end of the string is reached, you may want to handle this case
                    // For now, let's fill the remaining elements with a default character, say ' '
                    while(j< memory[0].length){
                        memory[i][j] = '\u0000';
                        j++;
                    }
                    return;
                }
            }
        }
    }

    private static void execute()
    {
        int address = 0;
        while(true)
        {
            //get the address from IC in numeric form
            //System.out.println("IC "+ Arrays.toString(IC));
            address = Character.getNumericValue(IC[0])*10 + Character.getNumericValue(IC[1]);

            //increment IC
            int newAddress = address+1;
            IC[0] = Character.forDigit(newAddress/10, 10);
            IC[1] = Character.forDigit(newAddress%10, 10);


            //load instruction in IR
            osextended.IR = osextended.memory[address];

           //break if the instruction is null
            if(IR[0]=='\u0000') break;

            String instruction="" + IR[0] + IR[1];
            int operand = Character.getNumericValue(IR[2])*10 + Character.getNumericValue(IR[3]);

            switch(instruction)
            {

                case "GD":
                    IR[3] = 0;
                    operand = operand - operand%10;
                    SI = '1';
                    MOS(SI, operand);
                    break;

                case "PD":
                    SI = '2';
                    MOS(SI, operand);
                    break;


                case "LR":
                    loadregister(operand);
                    break;

                case "SR":
                    storetoLocation(operand);
                    break;

                case "CR":
                    compRegister(operand);
//                        System.out.println(Arrays.toString(C));
                    break;

                case "BT":
                   branch(address, operand);
                    //load memory to IR
                    break;

                case "AD":
                    add(operand);
                    break;

                case "SB":
                    Subtract(operand);
                    break;

                case "ML":
                    Multiple(operand);
                    break;

                case "DV":
                    Divide(operand);
                    break;

                default:
                    if(instruction.contains("H"))
                    {
                        SI = '3';
                        MOS(SI, operand);
                        System.out.println("Current job ended");
                        return;
                    }
                    else System.out.println("Unkown instruction Encountered  :"+instruction);
                    break;
            }
        }
    }


    public static void MOS(char SI, int operand) {

        switch (SI) {

            case '1':
                getdata(operand);
                break;

            case '2':
                printdata(operand);
                break;

            case '3':
                terminate();
                break;

            default:
                break;
        }
    }

    public static void terminate()
    {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt", true))) {
            // Write your content here
            writer.write("\n\n");
            writer.flush();
            writer.close();
        } catch (IOException e) {
            // Handle exception
            e.printStackTrace();
        }
    }

    private static void getdata(int address) {
        if (address < 10 || address > 90) return;
        try {
            String line = reader.readLine();
            int charIndex = 0;
            for (int i = address; i <address+ 10; i++) {
                for (int j = 0; j < memory[0].length; j++) {
                    // Check if there are still characters in the string
                    if (charIndex < line.length()) {
                        memory[i][j] = line.charAt(charIndex);
                        charIndex++;
                    } else {
                        // If the end of the string is reached, you may want to handle this case
                        // For now, let's fill the remaining elements with a default character, say ' '
                        while(j< memory[0].length){
                            memory[i][j] = '\u0000';
                            j++;
                        }
                        return;
                    }
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }
    private static  void  printdata(int address)
    {
        StringBuilder sb = new StringBuilder();
        System.out.println("\n\nOutput:");
        boolean breakFlag = false;
        for (int i = address; i <address+ 10; i++) {
            for (int j = 0; j < memory[0].length; j++) {
                if(memory[i][j]=='\u0000'){
                    System.out.println();
                    breakFlag = true;
                    break;
                }
                System.out.print(memory[i][j]);
                sb.append(memory[i][j]);
            }
            if(breakFlag) break;
        }
        sb.append('\n');
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt", true))) {
            // Write your content here
            writer.write(sb.toString());
            writer.flush();
            writer.close();
        } catch (IOException e) {
            // Handle exception
            e.printStackTrace();
        }
    }
    private  static void loadregister(int address)
    {
        if (address < 10 || address > 100) return;
        for (int i=0;i<4;i++)
        {
            R[i] = memory[address][i];
        }

    }

    private static void storetoLocation(int address)
    {
        if (address > 10 && address < 100)
        {
            for(int i=0;i<4;i++)
            {
                memory[address][i]=R[i];
            }
        }
    }

    private static void compRegister(int address)
    {
        for(int i=0;i<4;i++)
        {
            if(R[i]!=memory[address][i])
            {
                C[0] = false;
                return;
            }
        }
        C[0] = true;
    }

    private static void branch(int currAddress, int branchAddress){
        if(branchAddress>99) return;    //throw exception
        if(!C[0]) return;

        IC[0] = Character.forDigit(branchAddress /10, 10);
        IC[1] = Character.forDigit(branchAddress%10, 10);
    }
    private static void printMemory()
    {
        for (int i = 0; i < memory.length; i++) {
            for (int j = 0; j < memory[0].length; j++) {
                if(memory[i][j]=='\u0000') return;
                System.out.print(memory[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static void add(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r + r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }
    private static void Multiple(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r * r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }

    private static void Subtract(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r - r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }

    private static void Divide(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r / r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }

    public static void main(String[] args)
    {
        osextended.doFinal("/Users/adityadeore/Library/CloudStorage/GoogleDrive-adityasstorage3@gmail.com/My Drive/SY SEM 2/OS/LAB EXAM OS/Bash/input.txt");
        
    }
}




Jobs:

$AMJ000100030001
GD20RV20PD20H
$DTA
We are group 2
$END0001
$AMJ000200030001
GD40PD40H
$DTA
Hello Everyone
$END0002
$AMJ000300040001
GD40UP40PD40H
$DTA
Hello
$END0004
$AMJ000500030001
GD40LP40PD40H
$DTA
HELLO
$END0005
$AMJ000600080001
GD10GD20LR10AD20SR30PD30H
$DTA
2342
1421
$END0006
$AMJ0007000100001
GD20GD30GD40GD50LR20CR30BT09PD50HPD40H
$DTA
VIT
VIT
SAME
NOT SAME
$END0007
$AMJ000800080002
GD20PD20LR20SR21PD20SR22PD20H
$DTA
*
$END





////// Phase 2

import java.io.*;
import java.util.Arrays;


class PCB{
    int jobId, TTL, TLL, TC, LC, DC, NGD;
    public PCB(int jobId, int TTL, int TLL){
        this.jobId = jobId;
        this.TTL = TTL;
        this.TLL = TLL;
        this.TC = 0;
        this.LC = 0;
        DC = 0;
    }
}
public class OSPhase2Updated
{

    private static int blockLen = 10;
    private static char[]R = new char[4];
    private static char[]IR = new char[4];
    private static char[]IC = new char[2];
    private static boolean[]C = new boolean[1];          // can we make it boolean??
    private static char[][] memory = new char[300][4];
    private static char SI, TI, PI;
    private static int time;
    private static char[] PTR = new char[2];
    private static PCB pcb;
    private static boolean[] isAllocated = new boolean[memory.length];
    private static BufferedReader reader;
    private static String output, lastIns;
    private static int numIns;
    private static int charArrayToInt(char[] arr){
        return Integer.parseInt(new String(arr));
    }

    public static int countSubstringOccurrences(String str, String substr) {
        int count = 0;
        int index = 0;
        while ((index = str.indexOf(substr, index)) != -1) {
            count++;
            index += substr.length();
        }
        return count;
    }

    private static void intToCharArray(int val, char[] arr){
        if(val>Math.pow(10, arr.length)-1) return;

        String strNum = Integer.toString(val);
        int blankSpaces = arr.length-strNum.length();
        for(int i = 0; i<blankSpaces; i++){
            arr[i] = '0';
        }
        for(int i = blankSpaces; i<arr.length; i++)
            arr[i] = strNum.charAt(i-blankSpaces);
    }
    public static void doFinal(String path)
    {
        //clear the contents of the output file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt"))) {
            writer.write("");
            writer.flush();
            writer.close();
        } catch (IOException e) {
            // Handle exception
            e.printStackTrace();
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {
            OSPhase2Updated.reader = reader;
            String line;
            boolean prevLineDTA = false;
            // Read the file line by line until the end is reached
            while ((line = reader.readLine()) != null) {
                //System.out.println(line);
                if(line.startsWith("$AMJ")){
                    init(Integer.parseInt(line.substring(4, 8)), Integer.parseInt(line.substring(8, 12)), Integer.parseInt(line.substring(12, 16)));
                }

                else if(line.startsWith("$DTA")){
                    execute();
                    prevLineDTA = true;
                }

                else if(line.startsWith("$END")){
                    prevLineDTA = false;
                    continue;
                }

                else if(!prevLineDTA){
                    load(line);
                    pcb.NGD+=countSubstringOccurrences(line, "GD");
                    char[] temp = {'0', '0'};
                    IC = temp;
//                    System.out.println("Current line: " + line + "\n");
//                    System.out.println("Memory:");
                    printMemory();
                    prevLineDTA = false;
                }
            }

        } catch (IOException e) {
            // Handle any potential IO exceptions, such as file not found
            e.printStackTrace();
        }

    }

    private static void init(int jobID, int TTL, int TLL)
    {
        Arrays.fill(R, '\u0000');
        Arrays.fill(IR, '\u0000');
        Arrays.fill(IC, '\u0000');
        Arrays.fill(C, false);
        Arrays.fill(isAllocated, false);

        for (char[] chars : memory) {
            Arrays.fill(chars, '\u0000');
        }

        SI = TI = PI = '0';
        output = "";
        lastIns = "NULL";
        numIns = 0;
        int pageTableAddress;
        time = 0;
        do{
            pageTableAddress = (int)(Math.random()*30);
        }while (pageTableAddress<10);
        isAllocated[pageTableAddress] = true;
        PTR[0] = Character.forDigit(pageTableAddress/10, 10);
        PTR[1] = Character.forDigit(pageTableAddress%10, 10);
        pcb = new PCB(jobID, TTL, TLL);
        System.out.println("PTR: " + Arrays.toString(PTR));
        System.out.println("PCB: " + pcb.jobId + " " + pcb.TTL + " " + pcb.TLL);
    }

    private static int addressMap(int virtualAddress){
        if(SI=='2'){
            int pageTableAddr = charArrayToInt(PTR);
            boolean valid = false;
            for(int i = pageTableAddr*10; i<pageTableAddr*10+10; i++){
                if(memory[i][0]=='\u0000') break;
                if(charArrayToInt(memory[i])==virtualAddress/10){
                    valid = true;
                    return virtualAddress;
                }
            }
            if(!valid){
                PI = '3';
                terminate(6);
                //mos(virtualAddress);
            }
            OSPhase2Updated.SI = '3';
            return 0;
        }
        int row = charArrayToInt(PTR)*10 + virtualAddress/10;
        System.out.println("Page table entry: " + Arrays.toString(memory[row]));
        return charArrayToInt(memory[row])*10 + virtualAddress%10;
    }

    private static void load(String line)
    {
        //generate a page frame
        int block;
        boolean allAllocated = true;
        for(boolean val: isAllocated){
            if(!val){
                allAllocated = false;
                break;
            }
        }
        if(allAllocated){
            System.out.println("Memory full.");
            EM(7);
        }
        do{
            block = (int) (Math.random()*30);
        }
        while(isAllocated[block] || block<10);
//        System.out.println("Block: " + block);
//        System.out.println("PTR: " + PTR);
//        System.out.println("Int conversion: "+ charArrayToInt(PTR));
        //make the entry into the page table
        for(int i = 0; i<blockLen; i++){
            int row = charArrayToInt(PTR)*10 + i;
            if(memory[row][0] == '\u0000'){
                intToCharArray(block, memory[row]);
//                System.out.println("Row: " + row + " contents: "+ Arrays.toString(memory[row]));
                break;
            }
        }


        int charIndex = 0;
        for (int i = block*10; i < block*10 + 10; i++) {
            for (int j = 0; j < memory[0].length; j++) {
                // Check if there are still characters in the string
                if (charIndex < line.length()) {
                    memory[i][j] = line.charAt(charIndex);
                    charIndex++;
                    if(line.charAt(charIndex-1)=='H'){
                        break;
                    }
                } else {
                    // If the end of the string is reached, you may want to handle this case
                    // For now, let's fill the remaining elements with a default character, say ' '
                    while(j< memory[0].length){
                        memory[i][j] = '\u0000';
                        j++;
                    }
                    return;
                }
            }
        }

    }

    private static void load(String line, int address){
        if(isAllocated[address/10]){
            EM(8);
        }

        for(int i = 0; i<blockLen; i++){
            int row = charArrayToInt(PTR)*10 + i;
            if(memory[row][0] == '\u0000'){
                intToCharArray(address/10, memory[row]);
                break;
            }
        }

        int charIndex = 0;
        for (int i = address; i < address*10 + 10; i++) {
            for (int j = 0; j < memory[0].length; j++) {
                // Check if there are still characters in the string
                if (charIndex < line.length()) {
                    memory[i][j] = line.charAt(charIndex);
                    charIndex++;
                }
                else {
                    while(j< memory[0].length){
                        memory[i][j] = '\u0000';
                        j++;
                    }
                    return;
                }
            }
        }
    }


    private static void execute(){

        int virtualAddress = 0;
        while(true)
        {
            if(SI=='3') break;
            int realAddress = addressMap(charArrayToInt(IC));

            //increment IC
            virtualAddress+=1;
            IC[0] = Character.forDigit(virtualAddress/10, 10);
            IC[1] = Character.forDigit(virtualAddress%10, 10);

            //load instruction in IR
            IR = memory[realAddress];
            //break if the instruction is null
            if(IR[0]=='\u0000') break;

            String instruction="" + IR[0] + IR[1];
            int operand = Character.getNumericValue(IR[2])*10 + Character.getNumericValue(IR[3]);
            if(!instruction.contains("H") && (operand>90 || !Character.isDigit(IR[2]) || !Character.isDigit(IR[3]))){
                PI = '2';
                terminate(5);
                return;
            }
            switch(instruction)
            {

                case "GD":
                    IR[3] = '0';
                    time+=2;
                    operand = operand - operand%10;
                    SI = '1';
                    MOS(SI, operand);
                    pcb.TC += 2;
                    if(pcb.TC>pcb.TTL)
                    {
                        TI = '2';
                        mos(operand);
                        //SI = '3';
                        //EM(3);
                    }
                    lastIns = "GD";
                    break;

                case "PD":
                    SI = '2';
                    pcb.LC++;
                    System.out.println("PCB TLL: " + pcb.TLL + "Line Count: " + pcb.LC);
                    if(pcb.LC>pcb.TLL)
                    {
                        terminate(2);
                        return;
                    }
                    MOS(SI, operand);
                    if(SI=='3') return;
                    SI = '0';
                    time+=1;
                    pcb.TC++;
                    if(pcb.TC>pcb.TTL)
                    {
                        TI = '2';
                        mos(operand);
                        //EM(3);
                    }
                    lastIns = "PD";
                    break;


                case "LR":
                    loadregister(operand);
                    pcb.TC++;
                    time++;
                    if(pcb.TC>pcb.TTL)
                    {
                        TI = '2';
                        mos(operand);
                        //EM(3);
                    }
                    lastIns = "LR";
                    break;

                case "SR":
                    storetoLocation(operand);
                    time++;
                    pcb.TC+=2;
                    if(pcb.TC>pcb.TTL)
                    {
                        TI = '2';
                        mos(operand);
                        //EM(3);
                    }
                    lastIns = "SR";
                    break;

                case "CR":
                    compRegister(operand);
                    time++;
                    pcb.TC++;
                    if(pcb.TC>pcb.TTL)
                    {
                        TI = '2';
                        mos(operand);
                        //EM(3);
                    }
                    lastIns = "CR";
                    break;

                case "BT":
                    branch(realAddress, operand);
                    time++;
                    pcb.TC++;
                    if(pcb.TC>pcb.TTL)
                    {
                        TI = '2';
                        mos(operand);
                        //EM(3);
                    }
                    //load memory to IR
                    lastIns = "BT";
                    break;

                case "AD":
                    add(operand);
                    break;

                case "SB":
                    Subtract(operand);
                    break;

                case "ML":
                    Multiple(operand);
                    break;

                case "DV":
                    Divide(operand);
                    break;

                default:
                    if(instruction.contains("H"))
                    {
                        lastIns = "H";
                        SI = '3';
                        MOS(SI, operand);
                        System.out.println("Current job ended");
                        return;
                    }
                    else {
                        PI = '1';
                        mos(operand);
                        //terminate(4);
                        return;
                    }
            }
            numIns++;
        }
    }


    public static void MOS(char SI, int operand) {

        switch (SI) {

            case '1':
                getdata(operand);
                break;

            case '2':
                int address = addressMap(operand);
                if(OSPhase2Updated.SI=='3') break;
                printdata(address);
                if(pcb.LC>pcb.TLL)
                {
                    terminate(2);
                }
                break;

            case '3':
                terminate(0);
                break;

            default:
                break;
        }
    }

  public static void mos(int operand) {
        char[] TIPI = {TI, PI};
        switch(new String(TIPI)){
            case "01":
                terminate(4);
                return;

            case "02":
                terminate(5);
                return;

            case "03":
                terminate(6);
                return;

            case "21":
                terminate(3);
                return;

            case "22":
                terminate(3);
                return;

            case "23":
                terminate(3);
                return;
        }

        char[] TISI = {TI, SI};
      switch (new String(TISI)) {

          case "01":
              getdata(operand);
              return;

          case "02":
              int address = addressMap(operand);
              if(OSPhase2Updated.SI=='3') return;
              printdata(address);
              if(pcb.LC>pcb.TLL)
              {
                  terminate(2);
              }
              return;

          case "03":
              terminate(0);
              return;


          case "21":
              terminate(3);
              return;

          case "22":
              address = addressMap(operand);
              if(OSPhase2Updated.SI=='3') return;
              printdata(address);
              if(pcb.LC>pcb.TLL)
              {
                  terminate(2);
              }
              terminate(3);
              return;

          case "23":
              terminate(3);
              return;

          default:
              return;
      }
    }
    public static void terminate(int exitCode)
    {

        //write to the output file
        String error = "";
        switch (exitCode) {
            case 1:
                error = "Out of Data Error";
                break;
            case 2:
                error = "Line Limit Exceeded Error";
                break;
            case 3:
                error = "Time Limit Exceeded Error";
                break;
            case 4:
                error = "Operation Code Error";
                break;
            case 5:
                error = "Operand Error";
                break;

            case 6:
                error = "Invalid Page Fault";
                break;

            case 7:
                error = "Memory full";
                break;

            case 8:
                error = "Trying to store data in allocated memory for the program";
                break;
        }
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt", true))) {
            String exitLine = "Job finished with exit code " + exitCode + "\n";
            int ic = charArrayToInt(IC);
            if(IR[0]=='H'){
                lastIns = "H";
                numIns++;
            }
            String status = "Last executed ins: " + lastIns + "\tTTC: "
                    + pcb.TC + "\tLines printed: " + pcb.LC + "\tNo. of executed ins: " +  numIns + "\tIC: " + ic +
                    "\tIR: " + Arrays.toString(IR) + "\tPTR: " + Arrays.toString(PTR) + "\tTTL: " + pcb.TTL + "\tTLL: " + pcb.TLL
                    + "\tLLC: " + pcb.LC;

            if(!output.isEmpty()) writer.write(output + "\n");
            writer.write(exitLine);
            if(exitCode!=0) writer.write(error + "\n");
            writer.write(status);
            writer.write("\n\n\n");
            writer.flush();
            writer.close();

        } catch (IOException e) {
            e.printStackTrace();
        }

        //clear the memory to avoid garbage in the next job
        int pageTableAddress = charArrayToInt(PTR)*10;
        for(int i = pageTableAddress; i<pageTableAddress+10; i++){
            if(memory[i][0]=='\u0000') break;
            int blockAddress = charArrayToInt(memory[i])*10;
            for(int j = blockAddress; j<blockAddress+10; j++){
                if(memory[j][0]=='\u0000') break;
                Arrays.fill(memory[j], '\u0000');
            }
        }

    }

    private static void getdata(int address) {
        if (address > 290) {
            EM(5);
        }
        //load the line with the load function
        try {
            String line = reader.readLine();
            if(line.charAt(0)=='$'){
                terminate(1);
            }
            load(line, address);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }
    private static  void  printdata(int address)
    {
        StringBuilder sb = new StringBuilder();
        System.out.println("\n\nOutput:");
        boolean breakFlag = false;
        for (int i = address; i <address+ 10; i++) {
            for (int j = 0; j < memory[0].length; j++) {
                if(memory[i][j]=='\u0000'){
                    System.out.println();
                    breakFlag = true;
                    break;
                }
                System.out.print(memory[i][j]);
                sb.append(memory[i][j]);
            }
            if(breakFlag) break;
        }
        output = sb.toString();
    }
    private  static void loadregister(int address)
    {
        if (address < 10 || address > 100) return;
        for (int i=0;i<4;i++)
        {
            R[i] = memory[address][i];
        }

    }

    private static void storetoLocation(int address)
    {
        if (address > 10 && address < 100)
        {
            for(int i=0;i<4;i++)
            {
                memory[address][i]=R[i];
            }
        }
    }

    private static void compRegister(int address)
    {
        for(int i=0;i<4;i++)
        {
            if(R[i]!=memory[address][i])
            {
                C[0] = false;
                return;
            }
        }
        C[0] = true;
    }

    private static void branch(int currAddress, int branchAddress){
        if(branchAddress>99) return;    //throw exception
        if(!C[0]) return;

        IC[0] = Character.forDigit(branchAddress /10, 10);
        IC[1] = Character.forDigit(branchAddress%10, 10);
    }
    private static void printMemory()
    {
        for (int i = 0; i < memory.length; i++) {
            for (int j = 0; j < memory[0].length; j++) {
                if(memory[i][j]=='\u0000') return;
                System.out.print(memory[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static void add(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r + r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }
    private static void Multiple(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r * r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }

    private static void Subtract(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r - r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }

    private static void Divide(int address)
    {
        int r=0;
        int r2=0;
        for (int i=0;i<4;i++)
        {
            if (R[i]!='\0')
            {
                int operand1 = Character.getNumericValue(R[i]);
                r=(r*10)+operand1;
            }

        }

        for (int i=0;i<4;i++)
        {
            if (memory[address][i]!='\0')
            {
                int operand2 = Character.getNumericValue(memory[address][i]);
                r2=(r2*10)+operand2;
            }

        }
        int result = r / r2;

        for (int i=3;i>=0;i--)
        {
            if(result!=0)
            {
                int rem=result%10;
                char cr=Character.forDigit(rem,10);
                R[i]=cr;
                result=result/10;
            }

        }

    }
    static void EM(int i) {
        switch (i) {
            case 1:
                System.out.println("Out of Data Error");
                terminate(1);
                break;
            case 2:
                System.out.println("Line Limit Exceeded Error");
                terminate(2);
                break;
            case 3:
                System.out.println("Time Limit Exceeded Error");
                terminate(3);
                break;

            case 4:
                System.out.println("Operation Code Error");
                terminate(4);
                break;

            case 5:
                System.out.println("Operand Error");
                terminate(5);
                break;

            case 6:
                System.out.println("Invalid Page Fault");
                terminate(6);
                break;

            case 7:
                System.out.println("Memory full");
                terminate(7);

            case 8:
                System.out.println("Trying to store data in allocated memory for the program");
                terminate(8);
        }
    }

    public static void main(String[] args)
    {
        doFinal("/Users/adityadeore/Library/CloudStorage/GoogleDrive-adityasstorage3@gmail.com/My Drive/SY SEM 2/OS/LAB EXAM OS/Bash/input.txt");
    }
}



Jobs:

$AMJ000100030001
GD10PD10H
$DTA
Hello VIT
$END0001
$AMJ000200130001
GD20GD30GD40GD50LR20CR30BT09PD50HPD40H
$DTA
VIT
VIT
SAME
NOT SAME
$END0002
$AMJ000300130001
GD20GD30GD40GD50LR20CR30BT09PD60HPD60H
$DTA
VIT
VIT
SAME
NOT SAME
$END0003
$AMJ000400040001
GD10PD10PD20H
$DTA
hello world
$END0004
$AMJ000500000001
GD10PD10H
$DTA
HELLO
$END0005
$AMJ000600030000
GD10PD10H
$DTA
HELLO
$END0006
$AMJ000700030001
GD10FD10H
$DTA
STRING
$END0007
$AMJ000800020001
GDabH
$DTA
String
$END0008
$AMJ000900040001
GD10GD20H
$DTA
data
$END0009
